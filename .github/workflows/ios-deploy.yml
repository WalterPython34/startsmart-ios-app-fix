name: Deploy iOS App

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install

    - name: Build Static Assets
      run: |
        mkdir -p dist
        cp index.html dist/
        cp -r *.js dist/ 2>/dev/null || true
        cp -r *.css dist/ 2>/dev/null || true
        cp -r assets dist/ 2>/dev/null || true

    - name: Fix Capacitor Config
      run: |
        cat > capacitor.config.js << 'EOF'
        const config = {
          appId: 'ai.nextax.startsmart',
          appName: 'StartSmart',
          webDir: 'dist',
          server: {
            androidScheme: 'https'
          },
          ios: {
            scheme: 'StartSmart'
          }
        };
        module.exports = config;
        EOF

    - name: Install Capacitor
      run: |
        npm install @capacitor/core @capacitor/cli @capacitor/ios

    - name: Setup iOS Platform
      run: |
        npx cap add ios
        npx cap sync ios

    - name: Configure Team ID
      run: |
        # Use the correct Team ID from App Store Connect: N6C2SDU8BS
        perl -i -pe 's/^(\s+)PRODUCT_BUNDLE_IDENTIFIER = ai\.nextax\.startsmart;$/$1DEVELOPMENT_TEAM = N6C2SDU8BS;\n$1PRODUCT_BUNDLE_IDENTIFIER = ai.nextax.startsmart;/g' ios/App/App.xcodeproj/project.pbxproj

    - name: Setup Ruby and Bundler
      run: |
        gem install bundler
        cd ios/App
        bundle init
        echo 'gem "fastlane"' >> Gemfile
        bundle install

    - name: Create Fastlane Files
      run: |
        cd ios/App
        mkdir -p fastlane
        
        cat > fastlane/Fastfile << 'EOF'
        default_platform(:ios)
        
        platform :ios do
          lane :beta do
            build_app(
              workspace: "App.xcworkspace",
              scheme: "App",
              configuration: "Release",
              export_method: "app-store"
            )
            upload_to_testflight(
              api_key: {
                key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
                issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
                key_filepath: ENV["APP_STORE_CONNECT_API_KEY_PATH"]
              },
              skip_waiting_for_build_processing: true
            )
          end
        end
        EOF

    - name: Deploy to TestFlight
      env:
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY_PATH: ~/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8
        TEAM_ID: ${{ secrets.TEAM_ID }}
      run: |
        mkdir -p ~/private_keys
        echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" | base64 --decode > ~/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8
        cd ios/App
        bundle exec fastlane ios beta
